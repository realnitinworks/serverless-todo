diff --git a/backend/package-lock.json b/backend/package-lock.json
index 2279246..a9a6fa5 100755
--- a/backend/package-lock.json
+++ b/backend/package-lock.json
@@ -7,7 +7,8 @@
     "@types/aws-lambda": {
       "version": "8.10.24",
       "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/@types/aws-lambda/-/aws-lambda-8.10.24.tgz",
-      "integrity": "sha512-9F70bcb2oBGZUZCyisE1Ap3vwgt04uiSmr4s9mhQf89vBrttgraBs2Rc8l9YrKiemCndCH7wxnYNWk5qEuv6rA=="
+      "integrity": "sha512-9F70bcb2oBGZUZCyisE1Ap3vwgt04uiSmr4s9mhQf89vBrttgraBs2Rc8l9YrKiemCndCH7wxnYNWk5qEuv6rA==",
+      "dev": true
     },
     "@types/axios": {
       "version": "0.14.0",
@@ -346,14 +347,15 @@
       "dev": true
     },
     "ajv-i18n": {
-      "version": "3.4.0",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/ajv-i18n/-/ajv-i18n-3.4.0.tgz",
-      "integrity": "sha512-le1nxncADqYS+iriLqxnR3iRpyoLQLsnrc7CbbJ8K/E+75kn7uxPH3sz2/n3h5FFLT2cTXP4zDi4uTA2xNt4zQ=="
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/ajv-i18n/-/ajv-i18n-3.6.0.tgz",
+      "integrity": "sha512-F21DzmzYq9aVtY8CGGtlnQDy3rFMaFW2KRlMuCQp76KiPIkvqN+mpq5MI9EsgC0VFwj+jeLIsvVCvPOa1sobBQ=="
     },
     "ajv-keywords": {
       "version": "3.4.0",
       "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/ajv-keywords/-/ajv-keywords-3.4.0.tgz",
-      "integrity": "sha512-aUjdRFISbuFOl0EIZc+9e4FfZp0bDZgAdOOf30bJmw8VM9v84SHyVyxDfbWxpGYbdZD/9XoKxfHVNmxPkhwyGw=="
+      "integrity": "sha512-aUjdRFISbuFOl0EIZc+9e4FfZp0bDZgAdOOf30bJmw8VM9v84SHyVyxDfbWxpGYbdZD/9XoKxfHVNmxPkhwyGw==",
+      "dev": true
     },
     "ansi-styles": {
       "version": "3.2.1",
@@ -923,7 +925,7 @@
     },
     "busboy": {
       "version": "0.3.1",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/busboy/-/busboy-0.3.1.tgz",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-0.3.1.tgz",
       "integrity": "sha512-y7tTxhGKXcyBxRKAni+awqx8uqaJKrSFSNFSeRG5CsWNdmy2BIK+6VGWEW7TZnIO/533mtMEA4rOevQV815YJw==",
       "requires": {
         "dicer": "0.3.0"
@@ -1190,7 +1192,7 @@
     },
     "content-type": {
       "version": "1.0.4",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/content-type/-/content-type-1.0.4.tgz",
+      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
       "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
     },
     "copy-concurrently": {
@@ -1388,7 +1390,7 @@
     },
     "dicer": {
       "version": "0.3.0",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/dicer/-/dicer-0.3.0.tgz",
+      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.3.0.tgz",
       "integrity": "sha512-MdceRRWqltEG2dZqO769g27N/3PXfcKl04VhYnBlo2YhH7zPi88VebsjTKclaOyiuMaGU72hTfw3VkUitGcVCA==",
       "requires": {
         "streamsearch": "0.1.2"
@@ -2822,9 +2824,9 @@
       "dev": true
     },
     "json-mask": {
-      "version": "0.3.8",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/json-mask/-/json-mask-0.3.8.tgz",
-      "integrity": "sha1-LWZBXeFLDovGwVFFVKkL/Kg1aUE="
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/json-mask/-/json-mask-0.3.9.tgz",
+      "integrity": "sha512-RRu7bf7vzOohKMrU5pD9+fROMltTegWj2trZlPNr7hXekptFGkOZo4S63Jdx2X1GR7IK6rEVvXkQKY+2TPs0PA=="
     },
     "json-parse-better-errors": {
       "version": "1.0.2",
@@ -3096,23 +3098,62 @@
       }
     },
     "middy": {
-      "version": "0.27.0",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/middy/-/middy-0.27.0.tgz",
-      "integrity": "sha512-EqCuzgZkfCgWn4Z7EKnFl3eaXkQ3t9voVadJtp6IirQ35nzDRKCy4E22DiK//C47W++9YALmS86ErberDMKWkw==",
+      "version": "0.36.0",
+      "resolved": "https://registry.npmjs.org/middy/-/middy-0.36.0.tgz",
+      "integrity": "sha512-IhIVEZQs8mxcvPHfzAQpwINj4R+aVgeCcUL9KS+OYE5Vy4hKhZtVl/1yfI8dSvDAfRBoRp6N/Gi04pxQM4vAzw==",
       "requires": {
-        "@types/aws-lambda": "^8.10.19",
-        "@types/http-errors": "^1.6.1",
+        "@types/aws-lambda": "^8.10.45",
+        "@types/http-errors": "^1.6.3",
         "ajv": "^6.9.1",
         "ajv-i18n": "^3.4.0",
-        "ajv-keywords": "^3.4.0",
+        "ajv-keywords": "^3.4.1",
         "busboy": "^0.3.1",
         "content-type": "^1.0.4",
-        "http-errors": "^1.7.1",
+        "http-errors": "^1.7.3",
         "json-mask": "^0.3.8",
         "negotiator": "^0.6.1",
         "once": "^1.4.0",
         "qs": "^6.6.0",
         "querystring": "^0.2.0"
+      },
+      "dependencies": {
+        "@types/aws-lambda": {
+          "version": "8.10.64",
+          "resolved": "https://registry.npmjs.org/@types/aws-lambda/-/aws-lambda-8.10.64.tgz",
+          "integrity": "sha512-LRKk2UQCSi7BsO5TlfSI8cTNpOGz+MH6+RXEWtuZmxJficQgxwEYJDiKVirzgyiHce0L0F4CqCVvKTwblAeOUw=="
+        },
+        "@types/http-errors": {
+          "version": "1.8.0",
+          "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-1.8.0.tgz",
+          "integrity": "sha512-2aoSC4UUbHDj2uCsCxcG/vRMXey/m17bC7UwitVm5hn22nI8O8Y9iDpA76Orc+DWkQ4zZrOKEshCqR/jSuXAHA=="
+        },
+        "ajv-keywords": {
+          "version": "3.5.2",
+          "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
+          "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ=="
+        },
+        "http-errors": {
+          "version": "1.8.0",
+          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.0.tgz",
+          "integrity": "sha512-4I8r0C5JDhT5VkvI47QktDW75rNlGVsUf/8hzjCC/wkWI/jdTRmBb9aI7erSG82r1bjKY3F6k28WnsVxB1C73A==",
+          "requires": {
+            "depd": "~1.1.2",
+            "inherits": "2.0.4",
+            "setprototypeof": "1.2.0",
+            "statuses": ">= 1.5.0 < 2",
+            "toidentifier": "1.0.0"
+          }
+        },
+        "inherits": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+        },
+        "setprototypeof": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+          "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
+        }
       }
     },
     "miller-rabin": {
@@ -3255,7 +3296,7 @@
     },
     "negotiator": {
       "version": "0.6.2",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/negotiator/-/negotiator-0.6.2.tgz",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.2.tgz",
       "integrity": "sha512-hZXc7K2e+PgeI1eDBe/10Ard4ekbfrrqG8Ep+8Jmf4JID2bNg7NvCPOZN+kfF574pFQI7mum2AUqDidoKqcTOw=="
     },
     "neo-async": {
@@ -3631,9 +3672,9 @@
       "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
     },
     "qs": {
-      "version": "6.7.0",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/qs/-/qs-6.7.0.tgz",
-      "integrity": "sha512-VCdBRNFTX1fyE7Nb6FYoURo/SPe62QCaAyzJvUjwRaIsc+NePBEniHlvxFmmX56+HZphIGtV0XeCirBtpDrTyQ=="
+      "version": "6.9.4",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.4.tgz",
+      "integrity": "sha512-A1kFqHekCTM7cz0udomYUoYNWjBebHm/5wzU/XqrBRBNWectVH0QIiN+NEcZ0Dte5hvzHwbr8+XQmguPhJ6WdQ=="
     },
     "querystring": {
       "version": "0.2.0",
@@ -4164,7 +4205,7 @@
     },
     "streamsearch": {
       "version": "0.1.2",
-      "resolved": "https://nexus.solutions.consensys-uk.net/repository/komgo-npm-group/streamsearch/-/streamsearch-0.1.2.tgz",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
       "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo="
     },
     "string_decoder": {
diff --git a/backend/package.json b/backend/package.json
index 69bda25..8fb6757 100755
--- a/backend/package.json
+++ b/backend/package.json
@@ -9,7 +9,7 @@
     "axios": "^0.19.0",
     "http-errors": "^1.7.2",
     "jsonwebtoken": "^8.5.1",
-    "middy": "^0.27.0",
+    "middy": "^0.36.0",
     "source-map-support": "^0.5.11",
     "uuid": "^3.3.2",
     "winston": "^3.2.1"
diff --git a/backend/src/lambda/http/createTodo.ts b/backend/src/lambda/http/createTodo.ts
index bc3ca08..66e4634 100755
--- a/backend/src/lambda/http/createTodo.ts
+++ b/backend/src/lambda/http/createTodo.ts
@@ -1,5 +1,7 @@
 import 'source-map-support/register'
-import { APIGatewayProxyEvent, APIGatewayProxyHandler, APIGatewayProxyResult } from 'aws-lambda'
+import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
+import * as middy from 'middy'
+import { cors } from 'middy/middlewares'
 
 import { CreateTodoRequest } from '../../requests/CreateTodoRequest'
 import { getUserId } from "../utils"
@@ -8,7 +10,7 @@ import { TodoItem } from '../../models/TodoItem'
 
 
 
-export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
+export const handler = middy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
   console.log("Processing event: ", event);
   
   const createTodoRequest: CreateTodoRequest = JSON.parse(event.body);
@@ -18,11 +20,15 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
 
   return {
     statusCode: 201,
-    headers: {
-      'Access-Control-Allow-Origin': '*'
-    },
     body: JSON.stringify({
       item: newTodo
     })
   }
-}
+});
+
+
+handler.use(
+  cors({
+    credentials: true
+  })
+);
diff --git a/backend/src/lambda/http/deleteTodo.ts b/backend/src/lambda/http/deleteTodo.ts
index 014e4bd..b90441b 100755
--- a/backend/src/lambda/http/deleteTodo.ts
+++ b/backend/src/lambda/http/deleteTodo.ts
@@ -1,12 +1,14 @@
 import 'source-map-support/register'
-import { APIGatewayProxyEvent, APIGatewayProxyResult, APIGatewayProxyHandler } from 'aws-lambda'
+import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
+import * as middy from 'middy'
+import { cors } from 'middy/middlewares'
 
 import { getUserId } from "../utils"
 import { deleteTodo, getTodo } from '../../businessLogic/todos';
 import { TodoItem } from '../../models/TodoItem'
 
 
-export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
+export const handler = middy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
   console.log("Processing event: ", event);
   
   const userId: string = getUserId(event);
@@ -16,9 +18,6 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
   if (!todo) {
     return {
       statusCode: 404,
-      headers: {
-        'Access-Control-Allow-Origin': '*'
-      },
       body: JSON.stringify({
         "error": `todo#${todoId} does not exist`
       })
@@ -29,9 +28,13 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
   
   return {
     statusCode: 200,
-    headers: {
-      'Access-Control-Allow-Origin': '*'
-    },
     body: ""
   }
-}
+});
+
+
+handler.use(
+  cors({
+    credentials: true
+  })
+);
diff --git a/backend/src/lambda/http/generateUploadUrl.ts b/backend/src/lambda/http/generateUploadUrl.ts
index b287873..f600fab 100755
--- a/backend/src/lambda/http/generateUploadUrl.ts
+++ b/backend/src/lambda/http/generateUploadUrl.ts
@@ -1,5 +1,7 @@
 import 'source-map-support/register'
-import { APIGatewayProxyEvent, APIGatewayProxyResult, APIGatewayProxyHandler } from 'aws-lambda'
+import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
+import * as middy from 'middy'
+import { cors } from 'middy/middlewares'
 
 import { getUserId } from "../utils"
 import { 
@@ -10,7 +12,7 @@ import {
 import { TodoItem } from '../../models/TodoItem'
 
 
-export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
+export const handler = middy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
   console.log("Processing event: ", event);
   
   const userId: string = getUserId(event);
@@ -20,9 +22,6 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
   if (!todo) {
     return {
       statusCode: 404,
-      headers: {
-        'Access-Control-Allow-Origin': '*'
-      },
       body: JSON.stringify({
         "error": `todo#${todoId} does not exist`
       })
@@ -34,11 +33,16 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
   
   return {
     statusCode: 200,
-    headers: {
-      'Access-Control-Allow-Origin': '*'
-    },
     body: JSON.stringify({
       uploadUrl
     })
   }
-}
+});
+
+
+handler.use(
+  cors({
+    credentials: true
+  })
+);
+
diff --git a/backend/src/lambda/http/getTodos.ts b/backend/src/lambda/http/getTodos.ts
index 0f9b501..09cdbae 100755
--- a/backend/src/lambda/http/getTodos.ts
+++ b/backend/src/lambda/http/getTodos.ts
@@ -1,5 +1,7 @@
 import 'source-map-support/register'
-import { APIGatewayProxyEvent, APIGatewayProxyResult, APIGatewayProxyHandler } from 'aws-lambda'
+import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
+import * as middy from 'middy'
+import { cors } from 'middy/middlewares'
 
 import { getUserId } from "../utils"
 import { getTodos } from "../../businessLogic/todos"
@@ -7,7 +9,7 @@ import { TodoItem } from '../../models/TodoItem'
 
 
 
-export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
+export const handler = middy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
   console.log("Processing event: ", event);
 
   const userId: string = getUserId(event);
@@ -15,11 +17,15 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
 
   return {
     statusCode: 200,
-    headers: {
-      'Access-Control-Allow-Origin': '*'
-    },
     body: JSON.stringify({
       items: todos
     })
   }
-}
+});
+
+
+handler.use(
+  cors({
+    credentials: true
+  })
+);
diff --git a/backend/src/lambda/http/updateTodo.ts b/backend/src/lambda/http/updateTodo.ts
index 625ff46..15b79d0 100755
--- a/backend/src/lambda/http/updateTodo.ts
+++ b/backend/src/lambda/http/updateTodo.ts
@@ -1,5 +1,7 @@
 import 'source-map-support/register'
-import { APIGatewayProxyEvent, APIGatewayProxyResult, APIGatewayProxyHandler } from 'aws-lambda'
+import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'
+import * as middy from 'middy'
+import { cors } from 'middy/middlewares'
 
 import { UpdateTodoRequest } from '../../requests/UpdateTodoRequest'
 import { getUserId } from "../utils"
@@ -7,7 +9,7 @@ import { TodoItem } from '../../models/TodoItem'
 import { updateTodo, getTodo } from '../../businessLogic/todos'
 
 
-export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
+export const handler = middy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
   console.log("Processing event: ", event);
 
   const userId: string = getUserId(event);
@@ -18,9 +20,6 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
   if (!todo) {
     return {
       statusCode: 404,
-      headers: {
-        'Access-Control-Allow-Origin': '*'
-      },
       body: JSON.stringify({
         "error": `todo#${todoId} does not exist`
       })
@@ -31,9 +30,13 @@ export const handler: APIGatewayProxyHandler = async (event: APIGatewayProxyEven
 
   return {
     statusCode: 200,
-    headers: {
-      'Access-Control-Allow-Origin': '*'
-    },
     body: ""
   }
-}
+});
+
+
+handler.use(
+  cors({
+    credentials: true
+  })
+);
